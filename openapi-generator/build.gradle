plugins {
    id "org.openapi.generator" version "4.1.0"
}

task clean(type: Delete) {
    delete "$rootDir/target"
}

ext {
    generateVersion = "0.7.17-SNAPSHOT"
}

//NOTE - For some reason the library field is ignored. I had to create a configFile per library.

["vertx", "okhttp-gson", "jersey2"].eachWithIndex { library, index ->
    task "generate_${library}"(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        version = "${generateVersion}".toString()
        id = "api-${library}-client".toString()
        configFile = "$rootDir/${library}.json".toString()
        library = "${library}".toString()
        groupId = 'io.nem'.toString()
        generatorName = "java"
        inputSpec = "$rootDir/openapi3-any-of-patch.yaml".toString()
        apiPackage = "io.nem.sdk.openapi.${library}.api".toString()
        invokerPackage = "io.nem.sdk.openapi.${library}.invoker".toString()
        modelPackage = "io.nem.sdk.openapi.${library}.model".toString()
        outputDir = "$rootDir/target/api-${library}-client".toString()
    }
}

task generate

generate.dependsOn "generate_vertx"
generate.dependsOn "generate_okhttp-gson"
generate.dependsOn "generate_jersey2"


def getPropertyValue(key) {
    def value = project.hasProperty(key) ? project[key] : System.getenv(key)
    return value?.trim() == '' ? null : value
}

def ossrhUsername = getPropertyValue('ossrhUsername');
def ossrhPassword = getPropertyValue('ossrhPassword');

def signingSecretKeyRingFile = getPropertyValue('signingSecretKeyRingFile')
def signingKeyId = getPropertyValue('signingKeyId')
def signingPassword = getPropertyValue('signingPassword')


allprojects {
    ext."signing.keyId" = signingKeyId
    ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
    ext."signing.password" = signingPassword
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    javadoc {
        failOnError = false
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    build.dependsOn generate

    if (signingKeyId != null) {
        apply plugin: 'signing'
        signing {
            sign configurations.archives
        }
    }
    uploadArchives {

        repositories {
            mavenDeployer {

                if (ossrhUsername == null) {
                    throw new IllegalStateException("ossrhUsername env or project property is required.")
                }
                if (ossrhPassword == null) {
                    throw new IllegalStateException("ossrhPassword env or project property is required.")
                }

                if (signingKeyId != null) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                logger.info('Uploading artifacts for project ' + project.name)

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    packaging 'jar'
                    url 'https://github.com/nemtech/nem2-sdk-java'

                    scm {
                        connection 'scm:git:https://github.com/nemtech/nem2-sdk-java.git'
                        developerConnection 'scm:svn:https://github.com/nemtech/nem2-sdk-java'
                        url 'https://github.com/nemtech/nem2-sdk-java'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }
}
