/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.nem.sdk.infrastructure.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/**
 * The transaction that triggered the receipt.
 */
@ApiModel(description = "The transaction that triggered the receipt.")
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2019-06-20T19:56:23.892+01:00[Europe/London]")
public class SourceDTO {

    public static final String SERIALIZED_NAME_PRIMARY_ID = "primaryId";
    public static final String SERIALIZED_NAME_SECONDARY_ID = "secondaryId";
    @SerializedName(SERIALIZED_NAME_PRIMARY_ID)
    private Integer primaryId;
    @SerializedName(SERIALIZED_NAME_SECONDARY_ID)
    private Integer secondaryId;

    public SourceDTO primaryId(Integer primaryId) {
        this.primaryId = primaryId;
        return this;
    }

    /**
     * The transaction index within the block.
     *
     * @return primaryId
     */
    @ApiModelProperty(
        example = "1",
        required = true,
        value = "The transaction index within the block.")
    public Integer getPrimaryId() {
        return primaryId;
    }

    public void setPrimaryId(Integer primaryId) {
        this.primaryId = primaryId;
    }

    public SourceDTO secondaryId(Integer secondaryId) {
        this.secondaryId = secondaryId;
        return this;
    }

    /**
     * The transaction index inside within the aggregate transaction. If the transaction is not an
     * inner transaction, then the secondary id is set to 0.
     *
     * @return secondaryId
     */
    @ApiModelProperty(
        example = "0",
        required = true,
        value =
            "The transaction index inside within the aggregate transaction. If the transaction is not an inner transaction, then the secondary id is set to 0.")
    public Integer getSecondaryId() {
        return secondaryId;
    }

    public void setSecondaryId(Integer secondaryId) {
        this.secondaryId = secondaryId;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceDTO sourceDTO = (SourceDTO) o;
        return Objects.equals(this.primaryId, sourceDTO.primaryId)
            && Objects.equals(this.secondaryId, sourceDTO.secondaryId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(primaryId, secondaryId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SourceDTO {\n");
        sb.append("    primaryId: ").append(toIndentedString(primaryId)).append("\n");
        sb.append("    secondaryId: ").append(toIndentedString(secondaryId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
